// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "assistant.proto" (package "assistant", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
/**
 * Message sent from client to server
 *
 * @generated from protobuf message assistant.ClientMessage
 */
export interface ClientMessage {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string connection_id = 2;
     */
    connectionId: string;
    /**
     * @generated from protobuf field: string provider = 3;
     */
    provider: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: string message_id = 5;
     */
    messageId: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 6;
     */
    timestamp: bigint;
}
/**
 * Message sent from server to client
 *
 * @generated from protobuf message assistant.ServerMessage
 */
export interface ServerMessage {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: assistant.MessageType type = 3;
     */
    type: MessageType;
    /**
     * @generated from protobuf field: repeated assistant.ToolCall tool_calls = 4;
     */
    toolCalls: ToolCall[];
    /**
     * @generated from protobuf field: string session_id = 5;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 6;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: assistant.MessageStatus status = 7;
     */
    status: MessageStatus;
}
/**
 * Tool call representation
 *
 * @generated from protobuf message assistant.ToolCall
 */
export interface ToolCall {
    /**
     * @generated from protobuf field: string tool_call_id = 1;
     */
    toolCallId: string;
    /**
     * @generated from protobuf field: string function_name = 2;
     */
    functionName: string;
    /**
     * @generated from protobuf field: string arguments = 3;
     */
    arguments: string;
    /**
     * @generated from protobuf field: assistant.ToolCallStatus status = 4;
     */
    status: ToolCallStatus;
    /**
     * @generated from protobuf field: string result = 5;
     */
    result: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 6;
     */
    timestamp: bigint;
}
/**
 * Request for sending a message
 *
 * @generated from protobuf message assistant.MessageRequest
 */
export interface MessageRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string connection_id = 2;
     */
    connectionId: string;
    /**
     * @generated from protobuf field: string provider = 3;
     */
    provider: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
}
/**
 * Response for message requests
 *
 * @generated from protobuf message assistant.MessageResponse
 */
export interface MessageResponse {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: repeated assistant.ToolCall tool_calls = 3;
     */
    toolCalls: ToolCall[];
    /**
     * @generated from protobuf field: assistant.MessageStatus status = 4;
     */
    status: MessageStatus;
}
/**
 * Request for conversation history
 *
 * @generated from protobuf message assistant.HistoryRequest
 */
export interface HistoryRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: uint32 limit = 2;
     */
    limit: number;
    /**
     * @generated from protobuf field: uint64 before_timestamp = 3;
     */
    beforeTimestamp: bigint;
}
/**
 * Response containing conversation history
 *
 * @generated from protobuf message assistant.HistoryResponse
 */
export interface HistoryResponse {
    /**
     * @generated from protobuf field: repeated assistant.ServerMessage messages = 1;
     */
    messages: ServerMessage[];
    /**
     * @generated from protobuf field: bool has_more = 2;
     */
    hasMore: boolean;
}
/**
 * Enum for message types
 *
 * @generated from protobuf enum assistant.MessageType
 */
export enum MessageType {
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_USER = 1;
     */
    USER = 1,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_ASSISTANT = 2;
     */
    ASSISTANT = 2,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_SYSTEM = 3;
     */
    SYSTEM = 3,
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_TOOL = 4;
     */
    TOOL = 4,
    MESSAGE_TYPE_ASSISTANT
}
/**
 * Enum for message status
 *
 * @generated from protobuf enum assistant.MessageStatus
 */
export enum MessageStatus {
    /**
     * @generated from protobuf enum value: MESSAGE_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MESSAGE_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: MESSAGE_STATUS_PROCESSING = 2;
     */
    PROCESSING = 2,
    /**
     * @generated from protobuf enum value: MESSAGE_STATUS_COMPLETE = 3;
     */
    COMPLETE = 3,
    /**
     * @generated from protobuf enum value: MESSAGE_STATUS_ERROR = 4;
     */
    ERROR = 4,
    MESSAGE_STATUS_COMPLETE
}
/**
 * Enum for tool call status
 *
 * @generated from protobuf enum assistant.ToolCallStatus
 */
export enum ToolCallStatus {
    /**
     * @generated from protobuf enum value: TOOL_CALL_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TOOL_CALL_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: TOOL_CALL_STATUS_EXECUTING = 2;
     */
    EXECUTING = 2,
    /**
     * @generated from protobuf enum value: TOOL_CALL_STATUS_COMPLETE = 3;
     */
    COMPLETE = 3,
    /**
     * @generated from protobuf enum value: TOOL_CALL_STATUS_ERROR = 4;
     */
    ERROR = 4,
    TOOL_CALL_STATUS_COMPLETE
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientMessage$Type extends MessageType$<ClientMessage> {
    decode(chunk: any) {
        throw new Error('Method not implemented.');
    }
    constructor() {
        super("assistant.ClientMessage", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ClientMessage>): ClientMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.connectionId = "";
        message.provider = "";
        message.content = "";
        message.messageId = "";
        message.timestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<ClientMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientMessage): ClientMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string connection_id */ 2:
                    message.connectionId = reader.string();
                    break;
                case /* string provider */ 3:
                    message.provider = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string message_id */ 5:
                    message.messageId = reader.string();
                    break;
                case /* uint64 timestamp */ 6:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string connection_id = 2; */
        if (message.connectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.connectionId);
        /* string provider = 3; */
        if (message.provider !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.provider);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string message_id = 5; */
        if (message.messageId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageId);
        /* uint64 timestamp = 6; */
        if (message.timestamp !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.ClientMessage
 */
export const ClientMessage = new ClientMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerMessage$Type extends MessageType$<ServerMessage> {
    [x: string]: any;
    constructor() {
        super("assistant.ServerMessage", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["assistant.MessageType", MessageType, "MESSAGE_TYPE_"] },
            { no: 4, name: "tool_calls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolCall },
            { no: 5, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["assistant.MessageStatus", MessageStatus, "MESSAGE_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<ServerMessage>): ServerMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = "";
        message.content = "";
        message.type = 0;
        message.toolCalls = [];
        message.sessionId = "";
        message.timestamp = 0n;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ServerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerMessage): ServerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* assistant.MessageType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* repeated assistant.ToolCall tool_calls */ 4:
                    message.toolCalls.push(ToolCall.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string session_id */ 5:
                    message.sessionId = reader.string();
                    break;
                case /* uint64 timestamp */ 6:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* assistant.MessageStatus status */ 7:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* assistant.MessageType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* repeated assistant.ToolCall tool_calls = 4; */
        for (let i = 0; i < message.toolCalls.length; i++)
            ToolCall.internalBinaryWrite(message.toolCalls[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string session_id = 5; */
        if (message.sessionId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.sessionId);
        /* uint64 timestamp = 6; */
        if (message.timestamp !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.timestamp);
        /* assistant.MessageStatus status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.ServerMessage
 */
export const ServerMessage = new ServerMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToolCall$Type extends MessageType$<ToolCall> {
    constructor() {
        super("assistant.ToolCall", [
            { no: 1, name: "tool_call_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "function_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "arguments", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["assistant.ToolCallStatus", ToolCallStatus, "TOOL_CALL_STATUS_"] },
            { no: 5, name: "result", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ToolCall>): ToolCall {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toolCallId = "";
        message.functionName = "";
        message.arguments = "";
        message.status = 0;
        message.result = "";
        message.timestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<ToolCall>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToolCall): ToolCall {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tool_call_id */ 1:
                    message.toolCallId = reader.string();
                    break;
                case /* string function_name */ 2:
                    message.functionName = reader.string();
                    break;
                case /* string arguments */ 3:
                    message.arguments = reader.string();
                    break;
                case /* assistant.ToolCallStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string result */ 5:
                    message.result = reader.string();
                    break;
                case /* uint64 timestamp */ 6:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToolCall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tool_call_id = 1; */
        if (message.toolCallId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toolCallId);
        /* string function_name = 2; */
        if (message.functionName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.functionName);
        /* string arguments = 3; */
        if (message.arguments !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.arguments);
        /* assistant.ToolCallStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string result = 5; */
        if (message.result !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.result);
        /* uint64 timestamp = 6; */
        if (message.timestamp !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.ToolCall
 */
export const ToolCall = new ToolCall$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageRequest$Type extends MessageType$<MessageRequest> {
    constructor() {
        super("assistant.MessageRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "provider", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessageRequest>): MessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.connectionId = "";
        message.provider = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<MessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageRequest): MessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string connection_id */ 2:
                    message.connectionId = reader.string();
                    break;
                case /* string provider */ 3:
                    message.provider = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string connection_id = 2; */
        if (message.connectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.connectionId);
        /* string provider = 3; */
        if (message.provider !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.provider);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.MessageRequest
 */
export const MessageRequest = new MessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageResponse$Type extends MessageType$<MessageResponse> {
    encode(response: any) {
        throw new Error('Method not implemented.');
    }
    constructor() {
        super("assistant.MessageResponse", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tool_calls", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToolCall },
            { no: 4, name: "status", kind: "enum", T: () => ["assistant.MessageStatus", MessageStatus, "MESSAGE_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<MessageResponse>): MessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = "";
        message.content = "";
        message.toolCalls = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<MessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageResponse): MessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* repeated assistant.ToolCall tool_calls */ 3:
                    message.toolCalls.push(ToolCall.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* assistant.MessageStatus status */ 4:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* repeated assistant.ToolCall tool_calls = 3; */
        for (let i = 0; i < message.toolCalls.length; i++)
            ToolCall.internalBinaryWrite(message.toolCalls[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* assistant.MessageStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.MessageResponse
 */
export const MessageResponse = new MessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryRequest$Type extends MessageType$<HistoryRequest> {
    constructor() {
        super("assistant.HistoryRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "before_timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<HistoryRequest>): HistoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.limit = 0;
        message.beforeTimestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<HistoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryRequest): HistoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* uint32 limit */ 2:
                    message.limit = reader.uint32();
                    break;
                case /* uint64 before_timestamp */ 3:
                    message.beforeTimestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* uint32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).uint32(message.limit);
        /* uint64 before_timestamp = 3; */
        if (message.beforeTimestamp !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.beforeTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.HistoryRequest
 */
export const HistoryRequest = new HistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryResponse$Type extends MessageType$<HistoryResponse> {
    constructor() {
        super("assistant.HistoryResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServerMessage },
            { no: 2, name: "has_more", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HistoryResponse>): HistoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        message.hasMore = false;
        if (value !== undefined)
            reflectionMergePartial<HistoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryResponse): HistoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated assistant.ServerMessage messages */ 1:
                    message.messages.push(ServerMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool has_more */ 2:
                    message.hasMore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated assistant.ServerMessage messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            ServerMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool has_more = 2; */
        if (message.hasMore !== false)
            writer.tag(2, WireType.Varint).bool(message.hasMore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.HistoryResponse
 */
export const HistoryResponse = new HistoryResponse$Type();
/**
 * @generated ServiceType for protobuf service assistant.AssistantService
 */
export const AssistantService = new ServiceType("assistant.AssistantService", [
    { name: "StreamConversation", serverStreaming: true, clientStreaming: true, options: {}, I: ClientMessage, O: ServerMessage },
    { name: "SendMessage", options: {}, I: MessageRequest, O: MessageResponse },
    { name: "GetConversationHistory", options: {}, I: HistoryRequest, O: HistoryResponse }
]);
